{
  "address": "0x9EFB207BEd2DC096f9f16DDE96b66bf902D9B466",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_VRFCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_LinkToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "CreatedRandomSVG",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        }
      ],
      "name": "CreatedUnfinishedRandomSVG",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "requestedRandomSVG",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "colors",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "create",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "finishMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_imageURI",
          "type": "string"
        }
      ],
      "name": "formatTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generatePath",
      "outputs": [
        {
          "internalType": "string",
          "name": "pathSVG",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generatePathCommand",
      "outputs": [
        {
          "internalType": "string",
          "name": "pathCommand",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generateSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "finalSVG",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumberOfPathCommands",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumberOfPaths",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pathCommands",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIdToSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIdToTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "size",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_svg",
          "type": "string"
        }
      ],
      "name": "svgToImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x748edebef545b46bb02eea3ef17190a6b211ead4e044f53a541ff00534c2d7f6",
  "receipt": {
    "to": null,
    "from": "0x884498c761E9Dc8f593566A46a66124c8E58F3eA",
    "contractAddress": "0x9EFB207BEd2DC096f9f16DDE96b66bf902D9B466",
    "transactionIndex": 30,
    "gasUsed": "4439631",
    "logsBloom": "0x
    "blockHash": "0x67ecbd6afb1984aede1c981f1eb9877fe5cf48876d16b78060a79fb71cbe07b4",
    "transactionHash": "0x748edebef545b46bb02eea3ef17190a6b211ead4e044f53a541ff00534c2d7f6",
    "logs": [],
    "blockNumber": 10024622,
    "cumulativeGasUsed": "6569280",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",
    "0x01BE23585060835E02B77ef475b0Cc51aA1e0709",
    "0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311",
    "1000000000000000000"
  ],
  "numDeployments": 6,
  "solcInputHash": "ac484d06008f210d06c4afd71e8b31c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_VRFCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LinkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"CreatedRandomSVG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"CreatedUnfinishedRandomSVG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"requestedRandomSVG\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"finishMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_imageURI\",\"type\":\"string\"}],\"name\":\"formatTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generatePath\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"pathSVG\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generatePathCommand\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"pathCommand\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generateSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"finalSVG\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberOfPathCommands\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberOfPaths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathCommands\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdToSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_svg\",\"type\":\"string\"}],\"name\":\"svgToImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RandomSVG.sol\":\"RandomSVG\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x778c9d88cd6d94ae866c1c3f5fec6022f07e39280d3b6d581c8cceb8a5ac4b1e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/RandomSVG.sol\":{\"content\":\"// Code pepared as part of a project for course BGK 519E \\u0130T\\u00dc 2022\\r\\n// By Ahmet and Murat\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\r\\nimport \\\"base64-sol/base64.sol\\\";\\r\\n\\r\\ncontract RandomSVG is ERC721URIStorage, VRFConsumerBase{\\r\\n    uint256 public tokenCounter;\\r\\n\\r\\n    bytes32 internal keyHash;\\r\\n    uint256 internal fee;\\r\\n    // SVG params\\r\\n    uint256 public maxNumberOfPaths;\\r\\n    uint256 public maxNumberOfPathCommands;\\r\\n    uint256 public size;\\r\\n    string[] public pathCommands;\\r\\n    string[] public colors;\\r\\n\\r\\n    mapping(bytes32 => address) public requestIdToSender;\\r\\n    mapping(uint256 => uint256) public tokenIdToRandomNumber;\\r\\n    mapping(bytes32 => uint256) public requestIdToTokenId;\\r\\n\\r\\n    event CreatedRandomSVG(uint256 indexed tokenId, string tokenURI);\\r\\n    event CreatedUnfinishedRandomSVG(uint256 indexed tokenId, uint256 randomNumber);\\r\\n    event requestedRandomSVG(bytes32 indexed requestId, uint256 indexed tokenId); \\r\\n    // Called when the contract is deployed\\r\\n    constructor(address _VRFCoordinator, address _LinkToken, bytes32 _keyHash, uint256 _fee) \\r\\n    VRFConsumerBase(_VRFCoordinator, _LinkToken) \\r\\n    ERC721(\\\"RandomSVG\\\", \\\"rNFT\\\") {\\r\\n        fee = _fee;\\r\\n        keyHash = _keyHash;\\r\\n        tokenCounter = 0;\\r\\n        \\r\\n        maxNumberOfPaths = 10;\\r\\n        maxNumberOfPathCommands = 5;\\r\\n        size = 500;\\r\\n        pathCommands = [\\\"M\\\",\\\"L\\\"];\\r\\n        colors = [\\\"red\\\", \\\"blue\\\", \\\"green\\\", \\\"yellow\\\", \\\"black\\\", \\\"white\\\"];\\r\\n    }\\r\\n\\r\\n    // Get a random number - Will use VRF oracle to get a random number\\r\\n    // Use that number to generate a random SVG code\\r\\n    // base64 encode the SVG code\\r\\n    // get the tokenURI and mint the NFT.\\r\\n    function create() public returns (bytes32 requestId) {\\r\\n        requestId = requestRandomness(keyHash, fee);\\r\\n        requestIdToSender[requestId] = msg.sender;\\r\\n        uint256 tokenId = tokenCounter; \\r\\n        requestIdToTokenId[requestId] = tokenId;\\r\\n        tokenCounter = tokenCounter + 1;\\r\\n        emit requestedRandomSVG(requestId, tokenId);\\r\\n    }\\r\\n\\r\\n    // Check to see if it's been minted and a random number have already been returned.\\r\\n    // Generate the random SVG\\r\\n    // Turn that into an image URI.\\r\\n    function finishMint(uint256 tokenId) public {\\r\\n        // Some security checks\\r\\n        require(bytes(tokenURI(tokenId)).length <= 0, \\\"tokenURI is already set!\\\"); \\r\\n        require(tokenCounter > tokenId, \\\"TokenId has not been minted yet!\\\");\\r\\n        require(tokenIdToRandomNumber[tokenId] > 0, \\\"Need to wait for the Chainlink node to respond!\\\");\\r\\n\\r\\n        uint256 randomNumber = tokenIdToRandomNumber[tokenId];\\r\\n        string memory svg = generateSVG(randomNumber);\\r\\n        string memory imageURI = svgToImageURI(svg);\\r\\n        _setTokenURI(tokenId, formatTokenURI(imageURI));\\r\\n        emit CreatedRandomSVG(tokenId, svg);\\r\\n    }\\r\\n\\r\\n    \\r\\n    // This function gets called by ChainLink VRF with the random number.\\r\\n    function fulfillRandomness(bytes32 requestId, uint256 randomNumber) internal override{\\r\\n        address nftOwner = requestIdToSender[requestId];\\r\\n        uint256 tokenId = requestIdToTokenId[requestId];\\r\\n        _safeMint(nftOwner, tokenId);\\r\\n        // Can't generate the SVG here because Chainlink VRF has a limit of 20k gas. My function takes much more than that. So wil send a call back to my smart contract so it can start generating the SVG\\r\\n        tokenIdToRandomNumber[tokenId] = randomNumber;\\r\\n        emit CreatedUnfinishedRandomSVG(tokenId, randomNumber);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function generateSVG(uint256 _randomNumber) public view returns (string memory finalSVG){\\r\\n        uint256 numberOfPaths = (_randomNumber % maxNumberOfPaths) + 1;\\r\\n        finalSVG = string(abi.encodePacked(\\\"<svg xmlns='http://www.w3.org/2000/svg' height='\\\", uint2str(size),\\\"' width='\\\",uint2str(size),\\\"'>\\\"));\\r\\n\\r\\n        // Generate a random path\\r\\n        for(uint i =0; i<numberOfPaths; i++){\\r\\n            uint256 newRNG = uint256(keccak256(abi.encode(_randomNumber, i)));\\r\\n            string memory pathSVG = generatePath(newRNG);\\r\\n            finalSVG = string(abi.encodePacked(finalSVG, pathSVG));\\r\\n        }\\r\\n\\r\\n        finalSVG = string(abi.encodePacked(finalSVG, \\\"</svg>\\\"));\\r\\n    }\\r\\n\\r\\n    function generatePath(uint256 _randomNumber) public view returns(string memory pathSVG){\\r\\n        uint256 numberOfPathCommands = (_randomNumber % maxNumberOfPathCommands) + 1;\\r\\n        pathSVG = \\\"<path d='\\\";\\r\\n        for(uint i = 0; i<numberOfPathCommands; i++){\\r\\n            uint256 newRNG = uint256(keccak256(abi.encode(_randomNumber, size + i)));\\r\\n            string memory pathCommand = generatePathCommand(newRNG);\\r\\n            pathSVG = string(abi.encodePacked(pathSVG, pathCommand));\\r\\n        }\\r\\n        string memory color = colors[_randomNumber % colors.length];\\r\\n        pathSVG = string(abi.encodePacked(pathSVG, \\\"' fill='transparent' stroke='\\\", color, \\\"'/>\\\"));\\r\\n    }\\r\\n\\r\\n    function generatePathCommand(uint256 _randomNumber) public view returns(string memory pathCommand) {\\r\\n        pathCommand = pathCommands[_randomNumber % pathCommands.length];\\r\\n        uint256 parameterOne = uint256(keccak256(abi.encode(_randomNumber, size * 2))) % size;\\r\\n        uint256 parameterTwo = uint256(keccak256(abi.encode(_randomNumber, size * 3))) % size;\\r\\n        pathCommand = string(abi.encodePacked(pathCommand, \\\" \\\", uint2str(parameterOne), \\\" \\\", uint2str(parameterTwo)));\\r\\n    }\\r\\n\\r\\n    // Turn svg string to an img uri of type base64 encoding\\r\\n    function svgToImageURI(string memory _svg)\\r\\n        public\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string memory baseURL = \\\"data:image/svg+xml;base64,\\\";\\r\\n        // Encode using open library. Can be found here: https://github.com/OpenZeppelin/solidity-jwt/blob/master/contracts/Base64.sol\\r\\n        string memory svgBase64Encoded = Base64.encode(\\r\\n            bytes(string(abi.encodePacked(_svg)))\\r\\n        );\\r\\n        string memory imageURI = string(\\r\\n            abi.encodePacked(baseURL, svgBase64Encoded)\\r\\n        );\\r\\n\\r\\n        return imageURI;\\r\\n    }\\r\\n\\r\\n    // Create a base64 encoded JSON object to hold the metadata of the svg with the base64 encoded version of it.\\r\\n    function formatTokenURI(string memory _imageURI)\\r\\n        public\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string memory baseURL = \\\"data:application/json;base64,\\\";\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    baseURL,\\r\\n                    Base64.encode(\\r\\n                        bytes(\\r\\n                            abi.encodePacked(\\r\\n                                '{\\\"name\\\": \\\"SVG NFT\\\", \\\"description\\\": \\\"An SVG created as part of a proof of concept for BGK 519E ITU 2022\\\", \\\"attributes\\\":\\\"any custom attributes\\\", \\\"image\\\": \\\"',\\r\\n                                _imageURI,\\r\\n                                '\\\"}'\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    // Taken as is from Stackoverflow: https://stackoverflow.com/questions/47129173/how-to-convert-uint-to-string-in-solidity\\r\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint j = _i;\\r\\n        uint len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k-1;\\r\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6525c808e08dab0258d25f983a6c7f72086bc0c490119ab1070bc57e7e2be88e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162004f9d38038062004f9d833981810160405281019062000037919062000658565b83836040518060400160405280600981526020017f52616e646f6d53564700000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f724e4654000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bd9291906200038c565b508060019080519060200190620000d69291906200038c565b5050508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050505080600a81905550816009819055506000600881905550600a600b819055506005600c819055506101f4600d8190555060405180604001604052806040518060400160405280600181526020017f4d0000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600181526020017f4c00000000000000000000000000000000000000000000000000000000000000815250815250600e906002620002039291906200041d565b506040518060c001604052806040518060400160405280600381526020017f726564000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f626c75650000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f677265656e00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f79656c6c6f77000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f626c61636b00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f7768697465000000000000000000000000000000000000000000000000000000815250815250600f9060066200038192919062000484565b50505050506200072f565b8280546200039a90620006f9565b90600052602060002090601f016020900481019282620003be57600085556200040a565b82601f10620003d957805160ff19168380011785556200040a565b828001600101855582156200040a579182015b8281111562000409578251825591602001919060010190620003ec565b5b509050620004199190620004eb565b5090565b82805482825590600052602060002090810192821562000471579160200282015b82811115620004705782518290805190602001906200045f9291906200038c565b50916020019190600101906200043e565b5b5090506200048091906200050a565b5090565b828054828255906000526020600020908101928215620004d8579160200282015b82811115620004d7578251829080519060200190620004c69291906200038c565b5091602001919060010190620004a5565b5b509050620004e791906200050a565b5090565b5b8082111562000506576000816000905550600101620004ec565b5090565b5b808211156200052e576000818162000524919062000532565b506001016200050b565b5090565b5080546200054090620006f9565b6000825580601f1062000554575062000575565b601f016020900490600052602060002090810190620005749190620004eb565b5b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005aa826200057d565b9050919050565b620005bc816200059d565b8114620005c857600080fd5b50565b600081519050620005dc81620005b1565b92915050565b6000819050919050565b620005f781620005e2565b81146200060357600080fd5b50565b6000815190506200061781620005ec565b92915050565b6000819050919050565b62000632816200061d565b81146200063e57600080fd5b50565b600081519050620006528162000627565b92915050565b6000806000806080858703121562000675576200067462000578565b5b60006200068587828801620005cb565b94505060206200069887828801620005cb565b9350506040620006ab8782880162000606565b9250506060620006be8782880162000641565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200071257607f821691505b60208210811415620007295762000728620006ca565b5b50919050565b60805160a0516148416200075c6000396000818161112001526124410152600061240501526148416000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806371aee19311610104578063b88d4fde116100a2578063c87b56dd11610071578063c87b56dd146105d9578063d082e38114610609578063e985e9c514610627578063efc81a8c14610657576101da565b8063b88d4fde1461053f578063bd11f69d1461055b578063c21bf36f1461058b578063c68b49d1146105a9576101da565b8063955968d4116100de578063955968d4146104a557806395d89b41146104d55780639c1cd795146104f3578063a22cb46514610523576101da565b806371aee1931461043b57806394985ddd1461046b578063949d225d14610487576101da565b806330d871c61161017c578063624194c71161014b578063624194c71461038f5780636352211e146103ab5780636dcee4ca146103db57806370a082311461040b576101da565b806330d871c6146102f557806333af59891461032557806342842e0e1461035557806348e896ab14610371576101da565b8063095ea7b3116101b8578063095ea7b31461025d578063219c0eee1461027957806322881f88146102a957806323b872dd146102d9576101da565b806301ffc9a7146101df57806306fdde031461020f578063081812fc1461022d575b600080fd5b6101f960048036038101906101f49190612c1a565b610675565b6040516102069190612c62565b60405180910390f35b610217610757565b6040516102249190612d16565b60405180910390f35b61024760048036038101906102429190612d6e565b6107e9565b6040516102549190612ddc565b60405180910390f35b61027760048036038101906102729190612e23565b61086e565b005b610293600480360381019061028e9190612e99565b610986565b6040516102a09190612ddc565b60405180910390f35b6102c360048036038101906102be9190612e99565b6109b9565b6040516102d09190612ed5565b60405180910390f35b6102f360048036038101906102ee9190612ef0565b6109d1565b005b61030f600480360381019061030a9190613078565b610a31565b60405161031c9190612d16565b60405180910390f35b61033f600480360381019061033a9190612d6e565b610aca565b60405161034c9190612d16565b60405180910390f35b61036f600480360381019061036a9190612ef0565b610c96565b005b610379610cb6565b6040516103869190612ed5565b60405180910390f35b6103a960048036038101906103a49190612d6e565b610cbc565b005b6103c560048036038101906103c09190612d6e565b610e25565b6040516103d29190612ddc565b60405180910390f35b6103f560048036038101906103f09190612d6e565b610ed7565b6040516104029190612d16565b60405180910390f35b610425600480360381019061042091906130c1565b610fd9565b6040516104329190612ed5565b60405180910390f35b61045560048036038101906104509190613078565b611091565b6040516104629190612d16565b60405180910390f35b610485600480360381019061048091906130ee565b61111e565b005b61048f6111ba565b60405161049c9190612ed5565b60405180910390f35b6104bf60048036038101906104ba9190612d6e565b6111c0565b6040516104cc9190612d16565b60405180910390f35b6104dd61126c565b6040516104ea9190612d16565b60405180910390f35b61050d60048036038101906105089190612d6e565b6112fe565b60405161051a9190612ed5565b60405180910390f35b61053d6004803603810190610538919061315a565b611316565b005b6105596004803603810190610554919061323b565b61132c565b005b61057560048036038101906105709190612d6e565b61138e565b6040516105829190612d16565b60405180910390f35b61059361143a565b6040516105a09190612ed5565b60405180910390f35b6105c360048036038101906105be9190612d6e565b611440565b6040516105d09190612d16565b60405180910390f35b6105f360048036038101906105ee9190612d6e565b6115cd565b6040516106009190612d16565b60405180910390f35b61061161171f565b60405161061e9190612ed5565b60405180910390f35b610641600480360381019061063c91906132be565b611725565b60405161064e9190612c62565b60405180910390f35b61065f6117b9565b60405161066c919061330d565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061074057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610750575061074f82611883565b5b9050919050565b60606000805461076690613357565b80601f016020809104026020016040519081016040528092919081815260200182805461079290613357565b80156107df5780601f106107b4576101008083540402835291602001916107df565b820191906000526020600020905b8154815290600101906020018083116107c257829003601f168201915b5050505050905090565b60006107f4826118ed565b610833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082a906133fb565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061087982610e25565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e19061348d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610909611959565b73ffffffffffffffffffffffffffffffffffffffff161480610938575061093781610932611959565b611725565b5b610977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096e9061351f565b60405180910390fd5b6109818383611961565b505050565b60106020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60126020528060005260406000206000915090505481565b6109e26109dc611959565b82611a1a565b610a21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a18906135b1565b60405180910390fd5b610a2c838383611af8565b505050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525090506000610a9784604051602001610a83919061360d565b604051602081830303815290604052611d54565b905060008282604051602001610aae929190613624565b6040516020818303038152906040529050809350505050919050565b606060006001600c5484610ade9190613677565b610ae891906136d7565b90506040518060400160405280600981526020017f3c7061746820643d270000000000000000000000000000000000000000000000815250915060005b81811015610bb05760008482600d54610b3e91906136d7565b604051602001610b4f92919061372d565b6040516020818303038152906040528051906020012060001c90506000610b7582611440565b90508481604051602001610b8a929190613624565b604051602081830303815290604052945050508080610ba890613756565b915050610b25565b506000600f808054905085610bc59190613677565b81548110610bd657610bd561379f565b5b906000526020600020018054610beb90613357565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1790613357565b8015610c645780601f10610c3957610100808354040283529160200191610c64565b820191906000526020600020905b815481529060010190602001808311610c4757829003601f168201915b505050505090508281604051602001610c7e929190613866565b60405160208183030381529060405292505050919050565b610cb18383836040518060200160405280600081525061132c565b505050565b600c5481565b6000610cc7826115cd565b511115610d09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d00906138ec565b60405180910390fd5b8060085411610d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4490613958565b60405180910390fd5b6000601160008381526020019081526020016000205411610da3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9a906139ea565b60405180910390fd5b6000601160008381526020019081526020016000205490506000610dc682610ed7565b90506000610dd382610a31565b9050610de784610de283611091565b611ecd565b837f15a6487b7915a7116ce2a61d43b17e9b47484b1931f3c79f2f3d139b307b389383604051610e179190612d16565b60405180910390a250505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec590613a7c565b60405180910390fd5b80915050919050565b606060006001600b5484610eeb9190613677565b610ef591906136d7565b9050610f02600d54611f41565b610f0d600d54611f41565b604051602001610f1e929190613ba6565b604051602081830303815290604052915060005b81811015610fb05760008482604051602001610f4f92919061372d565b6040516020818303038152906040528051906020012060001c90506000610f7582610aca565b90508481604051602001610f8a929190613624565b604051602081830303815290604052945050508080610fa890613756565b915050610f32565b5081604051602001610fc29190613c37565b604051602081830303815290604052915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561104a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104190613ccb565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060006040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152509050806110f6846040516020016110e29190613e1b565b604051602081830303815290604052611d54565b604051602001611107929190613624565b604051602081830303815290604052915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a390613e94565b60405180910390fd5b6111b682826120ca565b5050565b600d5481565b600e81815481106111d057600080fd5b9060005260206000200160009150905080546111eb90613357565b80601f016020809104026020016040519081016040528092919081815260200182805461121790613357565b80156112645780601f1061123957610100808354040283529160200191611264565b820191906000526020600020905b81548152906001019060200180831161124757829003601f168201915b505050505081565b60606001805461127b90613357565b80601f01602080910402602001604051908101604052809291908181526020018280546112a790613357565b80156112f45780601f106112c9576101008083540402835291602001916112f4565b820191906000526020600020905b8154815290600101906020018083116112d757829003601f168201915b5050505050905090565b60116020528060005260406000206000915090505481565b611328611321611959565b838361217a565b5050565b61133d611337611959565b83611a1a565b61137c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611373906135b1565b60405180910390fd5b611388848484846122e7565b50505050565b600f818154811061139e57600080fd5b9060005260206000200160009150905080546113b990613357565b80601f01602080910402602001604051908101604052809291908181526020018280546113e590613357565b80156114325780601f1061140757610100808354040283529160200191611432565b820191906000526020600020905b81548152906001019060200180831161141557829003601f168201915b505050505081565b600b5481565b6060600e8080549050836114549190613677565b815481106114655761146461379f565b5b90600052602060002001805461147a90613357565b80601f01602080910402602001604051908101604052809291908181526020018280546114a690613357565b80156114f35780601f106114c8576101008083540402835291602001916114f3565b820191906000526020600020905b8154815290600101906020018083116114d657829003601f168201915b505050505090506000600d54836002600d5461150f9190613eb4565b60405160200161152092919061372d565b6040516020818303038152906040528051906020012060001c6115439190613677565b90506000600d54846003600d5461155a9190613eb4565b60405160200161156b92919061372d565b6040516020818303038152906040528051906020012060001c61158e9190613677565b90508261159a83611f41565b6115a383611f41565b6040516020016115b593929190613f5a565b60405160208183030381529060405292505050919050565b60606115d8826118ed565b611617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160e90614013565b60405180910390fd5b600060066000848152602001908152602001600020805461163790613357565b80601f016020809104026020016040519081016040528092919081815260200182805461166390613357565b80156116b05780601f10611685576101008083540402835291602001916116b0565b820191906000526020600020905b81548152906001019060200180831161169357829003601f168201915b5050505050905060006116c1612343565b90506000815114156116d757819250505061171a565b60008251111561170c5780826040516020016116f4929190613624565b6040516020818303038152906040529250505061171a565b6117158461235a565b925050505b919050565b60085481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006117c9600954600a54612401565b9050336010600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006008549050806012600084815260200190815260200160002081905550600160085461184b91906136d7565b60088190555080827fb97343f1f2afc4959f818046ccae28fd7b05fcd2b7a7dc651cbb52a096cae03560405160405180910390a35090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166119d483610e25565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611a25826118ed565b611a64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5b906140a5565b60405180910390fd5b6000611a6f83610e25565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611ade57508373ffffffffffffffffffffffffffffffffffffffff16611ac6846107e9565b73ffffffffffffffffffffffffffffffffffffffff16145b80611aef5750611aee8185611725565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611b1882610e25565b73ffffffffffffffffffffffffffffffffffffffff1614611b6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6590614137565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd5906141c9565b60405180910390fd5b611be9838383612554565b611bf4600082611961565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c4491906141e9565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c9b91906136d7565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6060600082511415611d7757604051806020016040528060008152509050611ec8565b60006040518060600160405280604081526020016147cc6040913990506000600360028551611da691906136d7565b611db0919061421d565b6004611dbc9190613eb4565b90506000602082611dcd91906136d7565b67ffffffffffffffff811115611de657611de5612f4d565b5b6040519080825280601f01601f191660200182016040528015611e185781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015611e87576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050611e2c565b600389510660018114611ea15760028114611eb157611ebc565b613d3d60f01b6002830352611ebc565b603d60f81b60018303525b50505050508093505050505b919050565b611ed6826118ed565b611f15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0c906142c0565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611f3c929190612b0b565b505050565b60606000821415611f89576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120c5565b600082905060005b60008214611fbb578080611fa490613756565b915050600a82611fb4919061421d565b9150611f91565b60008167ffffffffffffffff811115611fd757611fd6612f4d565b5b6040519080825280601f01601f1916602001820160405280156120095781602001600182028036833780820191505090505b50905060008290505b600086146120bd5760018161202791906141e9565b90506000600a8088612039919061421d565b6120439190613eb4565b8761204e91906141e9565b603061205a91906142ed565b905060008160f81b9050808484815181106120785761207761379f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886120b4919061421d565b97505050612012565b819450505050505b919050565b60006010600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000601260008581526020019081526020016000205490506121248282612559565b826011600083815260200190815260200160002081905550807faad5362ce528ed941024b95d4c18dfd49b8503e1f586a5c353631d98c2af41b78460405161216c9190612ed5565b60405180910390a250505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156121e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e090614370565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516122da9190612c62565b60405180910390a3505050565b6122f2848484611af8565b6122fe84848484612577565b61233d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233490614402565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060612365826118ed565b6123a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239b90614494565b60405180910390fd5b60006123ae612343565b905060008151116123ce57604051806020016040528060008152506123f9565b806123d8846126ff565b6040516020016123e9929190613624565b6040516020818303038152906040525b915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016124759291906144b4565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016124a293929190614532565b6020604051808303816000875af11580156124c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e59190614585565b506000612508846000306007600089815260200190815260200160002054612860565b90506001600760008681526020019081526020016000205461252a91906136d7565b600760008681526020019081526020016000208190555061254b848261289c565b91505092915050565b505050565b6125738282604051806020016040528060008152506128cf565b5050565b60006125988473ffffffffffffffffffffffffffffffffffffffff1661292a565b156126f2578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026125c1611959565b8786866040518563ffffffff1660e01b81526004016125e394939291906145b2565b6020604051808303816000875af192505050801561261f57506040513d601f19601f8201168201806040525081019061261c9190614613565b60015b6126a2573d806000811461264f576040519150601f19603f3d011682016040523d82523d6000602084013e612654565b606091505b5060008151141561269a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269190614402565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506126f7565b600190505b949350505050565b60606000821415612747576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061285b565b600082905060005b6000821461277957808061276290613756565b915050600a82612772919061421d565b915061274f565b60008167ffffffffffffffff81111561279557612794612f4d565b5b6040519080825280601f01601f1916602001820160405280156127c75781602001600182028036833780820191505090505b5090505b60008514612854576001826127e091906141e9565b9150600a856127ef9190613677565b60306127fb91906136d7565b60f81b8183815181106128115761281061379f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561284d919061421d565b94506127cb565b8093505050505b919050565b6000848484846040516020016128799493929190614640565b6040516020818303038152906040528051906020012060001c9050949350505050565b600082826040516020016128b19291906146c7565b60405160208183030381529060405280519060200120905092915050565b6128d9838361293d565b6128e66000848484612577565b612925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291c90614402565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156129ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a49061473f565b60405180910390fd5b6129b6816118ed565b156129f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ed906147ab565b60405180910390fd5b612a0260008383612554565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a5291906136d7565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054612b1790613357565b90600052602060002090601f016020900481019282612b395760008555612b80565b82601f10612b5257805160ff1916838001178555612b80565b82800160010185558215612b80579182015b82811115612b7f578251825591602001919060010190612b64565b5b509050612b8d9190612b91565b5090565b5b80821115612baa576000816000905550600101612b92565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612bf781612bc2565b8114612c0257600080fd5b50565b600081359050612c1481612bee565b92915050565b600060208284031215612c3057612c2f612bb8565b5b6000612c3e84828501612c05565b91505092915050565b60008115159050919050565b612c5c81612c47565b82525050565b6000602082019050612c776000830184612c53565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612cb7578082015181840152602081019050612c9c565b83811115612cc6576000848401525b50505050565b6000601f19601f8301169050919050565b6000612ce882612c7d565b612cf28185612c88565b9350612d02818560208601612c99565b612d0b81612ccc565b840191505092915050565b60006020820190508181036000830152612d308184612cdd565b905092915050565b6000819050919050565b612d4b81612d38565b8114612d5657600080fd5b50565b600081359050612d6881612d42565b92915050565b600060208284031215612d8457612d83612bb8565b5b6000612d9284828501612d59565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612dc682612d9b565b9050919050565b612dd681612dbb565b82525050565b6000602082019050612df16000830184612dcd565b92915050565b612e0081612dbb565b8114612e0b57600080fd5b50565b600081359050612e1d81612df7565b92915050565b60008060408385031215612e3a57612e39612bb8565b5b6000612e4885828601612e0e565b9250506020612e5985828601612d59565b9150509250929050565b6000819050919050565b612e7681612e63565b8114612e8157600080fd5b50565b600081359050612e9381612e6d565b92915050565b600060208284031215612eaf57612eae612bb8565b5b6000612ebd84828501612e84565b91505092915050565b612ecf81612d38565b82525050565b6000602082019050612eea6000830184612ec6565b92915050565b600080600060608486031215612f0957612f08612bb8565b5b6000612f1786828701612e0e565b9350506020612f2886828701612e0e565b9250506040612f3986828701612d59565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612f8582612ccc565b810181811067ffffffffffffffff82111715612fa457612fa3612f4d565b5b80604052505050565b6000612fb7612bae565b9050612fc38282612f7c565b919050565b600067ffffffffffffffff821115612fe357612fe2612f4d565b5b612fec82612ccc565b9050602081019050919050565b82818337600083830152505050565b600061301b61301684612fc8565b612fad565b90508281526020810184848401111561303757613036612f48565b5b613042848285612ff9565b509392505050565b600082601f83011261305f5761305e612f43565b5b813561306f848260208601613008565b91505092915050565b60006020828403121561308e5761308d612bb8565b5b600082013567ffffffffffffffff8111156130ac576130ab612bbd565b5b6130b88482850161304a565b91505092915050565b6000602082840312156130d7576130d6612bb8565b5b60006130e584828501612e0e565b91505092915050565b6000806040838503121561310557613104612bb8565b5b600061311385828601612e84565b925050602061312485828601612d59565b9150509250929050565b61313781612c47565b811461314257600080fd5b50565b6000813590506131548161312e565b92915050565b6000806040838503121561317157613170612bb8565b5b600061317f85828601612e0e565b925050602061319085828601613145565b9150509250929050565b600067ffffffffffffffff8211156131b5576131b4612f4d565b5b6131be82612ccc565b9050602081019050919050565b60006131de6131d98461319a565b612fad565b9050828152602081018484840111156131fa576131f9612f48565b5b613205848285612ff9565b509392505050565b600082601f83011261322257613221612f43565b5b81356132328482602086016131cb565b91505092915050565b6000806000806080858703121561325557613254612bb8565b5b600061326387828801612e0e565b945050602061327487828801612e0e565b935050604061328587828801612d59565b925050606085013567ffffffffffffffff8111156132a6576132a5612bbd565b5b6132b28782880161320d565b91505092959194509250565b600080604083850312156132d5576132d4612bb8565b5b60006132e385828601612e0e565b92505060206132f485828601612e0e565b9150509250929050565b61330781612e63565b82525050565b600060208201905061332260008301846132fe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061336f57607f821691505b6020821081141561338357613382613328565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b60006133e5602c83612c88565b91506133f082613389565b604082019050919050565b60006020820190508181036000830152613414816133d8565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613477602183612c88565b91506134828261341b565b604082019050919050565b600060208201905081810360008301526134a68161346a565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000613509603883612c88565b9150613514826134ad565b604082019050919050565b60006020820190508181036000830152613538816134fc565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b600061359b603183612c88565b91506135a68261353f565b604082019050919050565b600060208201905081810360008301526135ca8161358e565b9050919050565b600081905092915050565b60006135e782612c7d565b6135f181856135d1565b9350613601818560208601612c99565b80840191505092915050565b600061361982846135dc565b915081905092915050565b600061363082856135dc565b915061363c82846135dc565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061368282612d38565b915061368d83612d38565b92508261369d5761369c613648565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006136e282612d38565b91506136ed83612d38565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613722576137216136a8565b5b828201905092915050565b60006040820190506137426000830185612ec6565b61374f6020830184612ec6565b9392505050565b600061376182612d38565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613794576137936136a8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f272066696c6c3d277472616e73706172656e7427207374726f6b653d27000000600082015250565b6000613804601d836135d1565b915061380f826137ce565b601d82019050919050565b7f272f3e0000000000000000000000000000000000000000000000000000000000600082015250565b60006138506003836135d1565b915061385b8261381a565b600382019050919050565b600061387282856135dc565b915061387d826137f7565b915061388982846135dc565b915061389482613843565b91508190509392505050565b7f746f6b656e55524920697320616c726561647920736574210000000000000000600082015250565b60006138d6601883612c88565b91506138e1826138a0565b602082019050919050565b60006020820190508181036000830152613905816138c9565b9050919050565b7f546f6b656e496420686173206e6f74206265656e206d696e7465642079657421600082015250565b6000613942602083612c88565b915061394d8261390c565b602082019050919050565b6000602082019050818103600083015261397181613935565b9050919050565b7f4e65656420746f207761697420666f722074686520436861696e6c696e6b206e60008201527f6f646520746f20726573706f6e64210000000000000000000000000000000000602082015250565b60006139d4602f83612c88565b91506139df82613978565b604082019050919050565b60006020820190508181036000830152613a03816139c7565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000613a66602983612c88565b9150613a7182613a0a565b604082019050919050565b60006020820190508181036000830152613a9581613a59565b9050919050565b7f3c73766720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323060008201527f30302f73766727206865696768743d2700000000000000000000000000000000602082015250565b6000613af86030836135d1565b9150613b0382613a9c565b603082019050919050565b7f272077696474683d270000000000000000000000000000000000000000000000600082015250565b6000613b446009836135d1565b9150613b4f82613b0e565b600982019050919050565b7f273e000000000000000000000000000000000000000000000000000000000000600082015250565b6000613b906002836135d1565b9150613b9b82613b5a565b600282019050919050565b6000613bb182613aeb565b9150613bbd82856135dc565b9150613bc882613b37565b9150613bd482846135dc565b9150613bdf82613b83565b91508190509392505050565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b6000613c216006836135d1565b9150613c2c82613beb565b600682019050919050565b6000613c4382846135dc565b9150613c4e82613c14565b915081905092915050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000613cb5602a83612c88565b9150613cc082613c59565b604082019050919050565b60006020820190508181036000830152613ce481613ca8565b9050919050565b7f7b226e616d65223a2022535647204e4654222c20226465736372697074696f6e60008201527f223a2022416e2053564720637265617465642061732070617274206f6620612060208201527f70726f6f66206f6620636f6e6365707420666f722042474b203531394520495460408201527f552032303232222c202261747472696275746573223a22616e7920637573746f60608201527f6d2061747472696275746573222c2022696d616765223a202200000000000000608082015250565b6000613db96099836135d1565b9150613dc482613ceb565b609982019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b6000613e056002836135d1565b9150613e1082613dcf565b600282019050919050565b6000613e2682613dac565b9150613e3282846135dc565b9150613e3d82613df8565b915081905092915050565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b6000613e7e601f83612c88565b9150613e8982613e48565b602082019050919050565b60006020820190508181036000830152613ead81613e71565b9050919050565b6000613ebf82612d38565b9150613eca83612d38565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f0357613f026136a8565b5b828202905092915050565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b6000613f446001836135d1565b9150613f4f82613f0e565b600182019050919050565b6000613f6682866135dc565b9150613f7182613f37565b9150613f7d82856135dc565b9150613f8882613f37565b9150613f9482846135dc565b9150819050949350505050565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b6000613ffd603183612c88565b915061400882613fa1565b604082019050919050565b6000602082019050818103600083015261402c81613ff0565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b600061408f602c83612c88565b915061409a82614033565b604082019050919050565b600060208201905081810360008301526140be81614082565b9050919050565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b6000614121602983612c88565b915061412c826140c5565b604082019050919050565b6000602082019050818103600083015261415081614114565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006141b3602483612c88565b91506141be82614157565b604082019050919050565b600060208201905081810360008301526141e2816141a6565b9050919050565b60006141f482612d38565b91506141ff83612d38565b925082821015614212576142116136a8565b5b828203905092915050565b600061422882612d38565b915061423383612d38565b92508261424357614242613648565b5b828204905092915050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006142aa602e83612c88565b91506142b58261424e565b604082019050919050565b600060208201905081810360008301526142d98161429d565b9050919050565b600060ff82169050919050565b60006142f8826142e0565b9150614303836142e0565b92508260ff03821115614319576143186136a8565b5b828201905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061435a601983612c88565b915061436582614324565b602082019050919050565b600060208201905081810360008301526143898161434d565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006143ec603283612c88565b91506143f782614390565b604082019050919050565b6000602082019050818103600083015261441b816143df565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b600061447e602f83612c88565b915061448982614422565b604082019050919050565b600060208201905081810360008301526144ad81614471565b9050919050565b60006040820190506144c960008301856132fe565b6144d66020830184612ec6565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000614504826144dd565b61450e81856144e8565b935061451e818560208601612c99565b61452781612ccc565b840191505092915050565b60006060820190506145476000830186612dcd565b6145546020830185612ec6565b818103604083015261456681846144f9565b9050949350505050565b60008151905061457f8161312e565b92915050565b60006020828403121561459b5761459a612bb8565b5b60006145a984828501614570565b91505092915050565b60006080820190506145c76000830187612dcd565b6145d46020830186612dcd565b6145e16040830185612ec6565b81810360608301526145f381846144f9565b905095945050505050565b60008151905061460d81612bee565b92915050565b60006020828403121561462957614628612bb8565b5b6000614637848285016145fe565b91505092915050565b600060808201905061465560008301876132fe565b6146626020830186612ec6565b61466f6040830185612dcd565b61467c6060830184612ec6565b95945050505050565b6000819050919050565b6146a061469b82612e63565b614685565b82525050565b6000819050919050565b6146c16146bc82612d38565b6146a6565b82525050565b60006146d3828561468f565b6020820191506146e382846146b0565b6020820191508190509392505050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614729602083612c88565b9150614734826146f3565b602082019050919050565b600060208201905081810360008301526147588161471c565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614795601c83612c88565b91506147a08261475f565b602082019050919050565b600060208201905081810360008301526147c481614788565b905091905056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212205d82b4e61c4b3d918a05e13a0de6adc53b37c1df43d4a918feb74403713f588764736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806371aee19311610104578063b88d4fde116100a2578063c87b56dd11610071578063c87b56dd146105d9578063d082e38114610609578063e985e9c514610627578063efc81a8c14610657576101da565b8063b88d4fde1461053f578063bd11f69d1461055b578063c21bf36f1461058b578063c68b49d1146105a9576101da565b8063955968d4116100de578063955968d4146104a557806395d89b41146104d55780639c1cd795146104f3578063a22cb46514610523576101da565b806371aee1931461043b57806394985ddd1461046b578063949d225d14610487576101da565b806330d871c61161017c578063624194c71161014b578063624194c71461038f5780636352211e146103ab5780636dcee4ca146103db57806370a082311461040b576101da565b806330d871c6146102f557806333af59891461032557806342842e0e1461035557806348e896ab14610371576101da565b8063095ea7b3116101b8578063095ea7b31461025d578063219c0eee1461027957806322881f88146102a957806323b872dd146102d9576101da565b806301ffc9a7146101df57806306fdde031461020f578063081812fc1461022d575b600080fd5b6101f960048036038101906101f49190612c1a565b610675565b6040516102069190612c62565b60405180910390f35b610217610757565b6040516102249190612d16565b60405180910390f35b61024760048036038101906102429190612d6e565b6107e9565b6040516102549190612ddc565b60405180910390f35b61027760048036038101906102729190612e23565b61086e565b005b610293600480360381019061028e9190612e99565b610986565b6040516102a09190612ddc565b60405180910390f35b6102c360048036038101906102be9190612e99565b6109b9565b6040516102d09190612ed5565b60405180910390f35b6102f360048036038101906102ee9190612ef0565b6109d1565b005b61030f600480360381019061030a9190613078565b610a31565b60405161031c9190612d16565b60405180910390f35b61033f600480360381019061033a9190612d6e565b610aca565b60405161034c9190612d16565b60405180910390f35b61036f600480360381019061036a9190612ef0565b610c96565b005b610379610cb6565b6040516103869190612ed5565b60405180910390f35b6103a960048036038101906103a49190612d6e565b610cbc565b005b6103c560048036038101906103c09190612d6e565b610e25565b6040516103d29190612ddc565b60405180910390f35b6103f560048036038101906103f09190612d6e565b610ed7565b6040516104029190612d16565b60405180910390f35b610425600480360381019061042091906130c1565b610fd9565b6040516104329190612ed5565b60405180910390f35b61045560048036038101906104509190613078565b611091565b6040516104629190612d16565b60405180910390f35b610485600480360381019061048091906130ee565b61111e565b005b61048f6111ba565b60405161049c9190612ed5565b60405180910390f35b6104bf60048036038101906104ba9190612d6e565b6111c0565b6040516104cc9190612d16565b60405180910390f35b6104dd61126c565b6040516104ea9190612d16565b60405180910390f35b61050d60048036038101906105089190612d6e565b6112fe565b60405161051a9190612ed5565b60405180910390f35b61053d6004803603810190610538919061315a565b611316565b005b6105596004803603810190610554919061323b565b61132c565b005b61057560048036038101906105709190612d6e565b61138e565b6040516105829190612d16565b60405180910390f35b61059361143a565b6040516105a09190612ed5565b60405180910390f35b6105c360048036038101906105be9190612d6e565b611440565b6040516105d09190612d16565b60405180910390f35b6105f360048036038101906105ee9190612d6e565b6115cd565b6040516106009190612d16565b60405180910390f35b61061161171f565b60405161061e9190612ed5565b60405180910390f35b610641600480360381019061063c91906132be565b611725565b60405161064e9190612c62565b60405180910390f35b61065f6117b9565b60405161066c919061330d565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061074057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610750575061074f82611883565b5b9050919050565b60606000805461076690613357565b80601f016020809104026020016040519081016040528092919081815260200182805461079290613357565b80156107df5780601f106107b4576101008083540402835291602001916107df565b820191906000526020600020905b8154815290600101906020018083116107c257829003601f168201915b5050505050905090565b60006107f4826118ed565b610833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082a906133fb565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061087982610e25565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e19061348d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610909611959565b73ffffffffffffffffffffffffffffffffffffffff161480610938575061093781610932611959565b611725565b5b610977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096e9061351f565b60405180910390fd5b6109818383611961565b505050565b60106020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60126020528060005260406000206000915090505481565b6109e26109dc611959565b82611a1a565b610a21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a18906135b1565b60405180910390fd5b610a2c838383611af8565b505050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525090506000610a9784604051602001610a83919061360d565b604051602081830303815290604052611d54565b905060008282604051602001610aae929190613624565b6040516020818303038152906040529050809350505050919050565b606060006001600c5484610ade9190613677565b610ae891906136d7565b90506040518060400160405280600981526020017f3c7061746820643d270000000000000000000000000000000000000000000000815250915060005b81811015610bb05760008482600d54610b3e91906136d7565b604051602001610b4f92919061372d565b6040516020818303038152906040528051906020012060001c90506000610b7582611440565b90508481604051602001610b8a929190613624565b604051602081830303815290604052945050508080610ba890613756565b915050610b25565b506000600f808054905085610bc59190613677565b81548110610bd657610bd561379f565b5b906000526020600020018054610beb90613357565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1790613357565b8015610c645780601f10610c3957610100808354040283529160200191610c64565b820191906000526020600020905b815481529060010190602001808311610c4757829003601f168201915b505050505090508281604051602001610c7e929190613866565b60405160208183030381529060405292505050919050565b610cb18383836040518060200160405280600081525061132c565b505050565b600c5481565b6000610cc7826115cd565b511115610d09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d00906138ec565b60405180910390fd5b8060085411610d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4490613958565b60405180910390fd5b6000601160008381526020019081526020016000205411610da3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9a906139ea565b60405180910390fd5b6000601160008381526020019081526020016000205490506000610dc682610ed7565b90506000610dd382610a31565b9050610de784610de283611091565b611ecd565b837f15a6487b7915a7116ce2a61d43b17e9b47484b1931f3c79f2f3d139b307b389383604051610e179190612d16565b60405180910390a250505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec590613a7c565b60405180910390fd5b80915050919050565b606060006001600b5484610eeb9190613677565b610ef591906136d7565b9050610f02600d54611f41565b610f0d600d54611f41565b604051602001610f1e929190613ba6565b604051602081830303815290604052915060005b81811015610fb05760008482604051602001610f4f92919061372d565b6040516020818303038152906040528051906020012060001c90506000610f7582610aca565b90508481604051602001610f8a929190613624565b604051602081830303815290604052945050508080610fa890613756565b915050610f32565b5081604051602001610fc29190613c37565b604051602081830303815290604052915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561104a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104190613ccb565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060006040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152509050806110f6846040516020016110e29190613e1b565b604051602081830303815290604052611d54565b604051602001611107929190613624565b604051602081830303815290604052915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a390613e94565b60405180910390fd5b6111b682826120ca565b5050565b600d5481565b600e81815481106111d057600080fd5b9060005260206000200160009150905080546111eb90613357565b80601f016020809104026020016040519081016040528092919081815260200182805461121790613357565b80156112645780601f1061123957610100808354040283529160200191611264565b820191906000526020600020905b81548152906001019060200180831161124757829003601f168201915b505050505081565b60606001805461127b90613357565b80601f01602080910402602001604051908101604052809291908181526020018280546112a790613357565b80156112f45780601f106112c9576101008083540402835291602001916112f4565b820191906000526020600020905b8154815290600101906020018083116112d757829003601f168201915b5050505050905090565b60116020528060005260406000206000915090505481565b611328611321611959565b838361217a565b5050565b61133d611337611959565b83611a1a565b61137c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611373906135b1565b60405180910390fd5b611388848484846122e7565b50505050565b600f818154811061139e57600080fd5b9060005260206000200160009150905080546113b990613357565b80601f01602080910402602001604051908101604052809291908181526020018280546113e590613357565b80156114325780601f1061140757610100808354040283529160200191611432565b820191906000526020600020905b81548152906001019060200180831161141557829003601f168201915b505050505081565b600b5481565b6060600e8080549050836114549190613677565b815481106114655761146461379f565b5b90600052602060002001805461147a90613357565b80601f01602080910402602001604051908101604052809291908181526020018280546114a690613357565b80156114f35780601f106114c8576101008083540402835291602001916114f3565b820191906000526020600020905b8154815290600101906020018083116114d657829003601f168201915b505050505090506000600d54836002600d5461150f9190613eb4565b60405160200161152092919061372d565b6040516020818303038152906040528051906020012060001c6115439190613677565b90506000600d54846003600d5461155a9190613eb4565b60405160200161156b92919061372d565b6040516020818303038152906040528051906020012060001c61158e9190613677565b90508261159a83611f41565b6115a383611f41565b6040516020016115b593929190613f5a565b60405160208183030381529060405292505050919050565b60606115d8826118ed565b611617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160e90614013565b60405180910390fd5b600060066000848152602001908152602001600020805461163790613357565b80601f016020809104026020016040519081016040528092919081815260200182805461166390613357565b80156116b05780601f10611685576101008083540402835291602001916116b0565b820191906000526020600020905b81548152906001019060200180831161169357829003601f168201915b5050505050905060006116c1612343565b90506000815114156116d757819250505061171a565b60008251111561170c5780826040516020016116f4929190613624565b6040516020818303038152906040529250505061171a565b6117158461235a565b925050505b919050565b60085481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006117c9600954600a54612401565b9050336010600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006008549050806012600084815260200190815260200160002081905550600160085461184b91906136d7565b60088190555080827fb97343f1f2afc4959f818046ccae28fd7b05fcd2b7a7dc651cbb52a096cae03560405160405180910390a35090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166119d483610e25565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611a25826118ed565b611a64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5b906140a5565b60405180910390fd5b6000611a6f83610e25565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611ade57508373ffffffffffffffffffffffffffffffffffffffff16611ac6846107e9565b73ffffffffffffffffffffffffffffffffffffffff16145b80611aef5750611aee8185611725565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611b1882610e25565b73ffffffffffffffffffffffffffffffffffffffff1614611b6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6590614137565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd5906141c9565b60405180910390fd5b611be9838383612554565b611bf4600082611961565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c4491906141e9565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c9b91906136d7565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6060600082511415611d7757604051806020016040528060008152509050611ec8565b60006040518060600160405280604081526020016147cc6040913990506000600360028551611da691906136d7565b611db0919061421d565b6004611dbc9190613eb4565b90506000602082611dcd91906136d7565b67ffffffffffffffff811115611de657611de5612f4d565b5b6040519080825280601f01601f191660200182016040528015611e185781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015611e87576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050611e2c565b600389510660018114611ea15760028114611eb157611ebc565b613d3d60f01b6002830352611ebc565b603d60f81b60018303525b50505050508093505050505b919050565b611ed6826118ed565b611f15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0c906142c0565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611f3c929190612b0b565b505050565b60606000821415611f89576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120c5565b600082905060005b60008214611fbb578080611fa490613756565b915050600a82611fb4919061421d565b9150611f91565b60008167ffffffffffffffff811115611fd757611fd6612f4d565b5b6040519080825280601f01601f1916602001820160405280156120095781602001600182028036833780820191505090505b50905060008290505b600086146120bd5760018161202791906141e9565b90506000600a8088612039919061421d565b6120439190613eb4565b8761204e91906141e9565b603061205a91906142ed565b905060008160f81b9050808484815181106120785761207761379f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886120b4919061421d565b97505050612012565b819450505050505b919050565b60006010600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000601260008581526020019081526020016000205490506121248282612559565b826011600083815260200190815260200160002081905550807faad5362ce528ed941024b95d4c18dfd49b8503e1f586a5c353631d98c2af41b78460405161216c9190612ed5565b60405180910390a250505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156121e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e090614370565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516122da9190612c62565b60405180910390a3505050565b6122f2848484611af8565b6122fe84848484612577565b61233d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233490614402565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060612365826118ed565b6123a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239b90614494565b60405180910390fd5b60006123ae612343565b905060008151116123ce57604051806020016040528060008152506123f9565b806123d8846126ff565b6040516020016123e9929190613624565b6040516020818303038152906040525b915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016124759291906144b4565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016124a293929190614532565b6020604051808303816000875af11580156124c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e59190614585565b506000612508846000306007600089815260200190815260200160002054612860565b90506001600760008681526020019081526020016000205461252a91906136d7565b600760008681526020019081526020016000208190555061254b848261289c565b91505092915050565b505050565b6125738282604051806020016040528060008152506128cf565b5050565b60006125988473ffffffffffffffffffffffffffffffffffffffff1661292a565b156126f2578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026125c1611959565b8786866040518563ffffffff1660e01b81526004016125e394939291906145b2565b6020604051808303816000875af192505050801561261f57506040513d601f19601f8201168201806040525081019061261c9190614613565b60015b6126a2573d806000811461264f576040519150601f19603f3d011682016040523d82523d6000602084013e612654565b606091505b5060008151141561269a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269190614402565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506126f7565b600190505b949350505050565b60606000821415612747576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061285b565b600082905060005b6000821461277957808061276290613756565b915050600a82612772919061421d565b915061274f565b60008167ffffffffffffffff81111561279557612794612f4d565b5b6040519080825280601f01601f1916602001820160405280156127c75781602001600182028036833780820191505090505b5090505b60008514612854576001826127e091906141e9565b9150600a856127ef9190613677565b60306127fb91906136d7565b60f81b8183815181106128115761281061379f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561284d919061421d565b94506127cb565b8093505050505b919050565b6000848484846040516020016128799493929190614640565b6040516020818303038152906040528051906020012060001c9050949350505050565b600082826040516020016128b19291906146c7565b60405160208183030381529060405280519060200120905092915050565b6128d9838361293d565b6128e66000848484612577565b612925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291c90614402565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156129ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a49061473f565b60405180910390fd5b6129b6816118ed565b156129f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ed906147ab565b60405180910390fd5b612a0260008383612554565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a5291906136d7565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054612b1790613357565b90600052602060002090601f016020900481019282612b395760008555612b80565b82601f10612b5257805160ff1916838001178555612b80565b82800160010185558215612b80579182015b82811115612b7f578251825591602001919060010190612b64565b5b509050612b8d9190612b91565b5090565b5b80821115612baa576000816000905550600101612b92565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612bf781612bc2565b8114612c0257600080fd5b50565b600081359050612c1481612bee565b92915050565b600060208284031215612c3057612c2f612bb8565b5b6000612c3e84828501612c05565b91505092915050565b60008115159050919050565b612c5c81612c47565b82525050565b6000602082019050612c776000830184612c53565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612cb7578082015181840152602081019050612c9c565b83811115612cc6576000848401525b50505050565b6000601f19601f8301169050919050565b6000612ce882612c7d565b612cf28185612c88565b9350612d02818560208601612c99565b612d0b81612ccc565b840191505092915050565b60006020820190508181036000830152612d308184612cdd565b905092915050565b6000819050919050565b612d4b81612d38565b8114612d5657600080fd5b50565b600081359050612d6881612d42565b92915050565b600060208284031215612d8457612d83612bb8565b5b6000612d9284828501612d59565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612dc682612d9b565b9050919050565b612dd681612dbb565b82525050565b6000602082019050612df16000830184612dcd565b92915050565b612e0081612dbb565b8114612e0b57600080fd5b50565b600081359050612e1d81612df7565b92915050565b60008060408385031215612e3a57612e39612bb8565b5b6000612e4885828601612e0e565b9250506020612e5985828601612d59565b9150509250929050565b6000819050919050565b612e7681612e63565b8114612e8157600080fd5b50565b600081359050612e9381612e6d565b92915050565b600060208284031215612eaf57612eae612bb8565b5b6000612ebd84828501612e84565b91505092915050565b612ecf81612d38565b82525050565b6000602082019050612eea6000830184612ec6565b92915050565b600080600060608486031215612f0957612f08612bb8565b5b6000612f1786828701612e0e565b9350506020612f2886828701612e0e565b9250506040612f3986828701612d59565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612f8582612ccc565b810181811067ffffffffffffffff82111715612fa457612fa3612f4d565b5b80604052505050565b6000612fb7612bae565b9050612fc38282612f7c565b919050565b600067ffffffffffffffff821115612fe357612fe2612f4d565b5b612fec82612ccc565b9050602081019050919050565b82818337600083830152505050565b600061301b61301684612fc8565b612fad565b90508281526020810184848401111561303757613036612f48565b5b613042848285612ff9565b509392505050565b600082601f83011261305f5761305e612f43565b5b813561306f848260208601613008565b91505092915050565b60006020828403121561308e5761308d612bb8565b5b600082013567ffffffffffffffff8111156130ac576130ab612bbd565b5b6130b88482850161304a565b91505092915050565b6000602082840312156130d7576130d6612bb8565b5b60006130e584828501612e0e565b91505092915050565b6000806040838503121561310557613104612bb8565b5b600061311385828601612e84565b925050602061312485828601612d59565b9150509250929050565b61313781612c47565b811461314257600080fd5b50565b6000813590506131548161312e565b92915050565b6000806040838503121561317157613170612bb8565b5b600061317f85828601612e0e565b925050602061319085828601613145565b9150509250929050565b600067ffffffffffffffff8211156131b5576131b4612f4d565b5b6131be82612ccc565b9050602081019050919050565b60006131de6131d98461319a565b612fad565b9050828152602081018484840111156131fa576131f9612f48565b5b613205848285612ff9565b509392505050565b600082601f83011261322257613221612f43565b5b81356132328482602086016131cb565b91505092915050565b6000806000806080858703121561325557613254612bb8565b5b600061326387828801612e0e565b945050602061327487828801612e0e565b935050604061328587828801612d59565b925050606085013567ffffffffffffffff8111156132a6576132a5612bbd565b5b6132b28782880161320d565b91505092959194509250565b600080604083850312156132d5576132d4612bb8565b5b60006132e385828601612e0e565b92505060206132f485828601612e0e565b9150509250929050565b61330781612e63565b82525050565b600060208201905061332260008301846132fe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061336f57607f821691505b6020821081141561338357613382613328565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b60006133e5602c83612c88565b91506133f082613389565b604082019050919050565b60006020820190508181036000830152613414816133d8565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613477602183612c88565b91506134828261341b565b604082019050919050565b600060208201905081810360008301526134a68161346a565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000613509603883612c88565b9150613514826134ad565b604082019050919050565b60006020820190508181036000830152613538816134fc565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b600061359b603183612c88565b91506135a68261353f565b604082019050919050565b600060208201905081810360008301526135ca8161358e565b9050919050565b600081905092915050565b60006135e782612c7d565b6135f181856135d1565b9350613601818560208601612c99565b80840191505092915050565b600061361982846135dc565b915081905092915050565b600061363082856135dc565b915061363c82846135dc565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061368282612d38565b915061368d83612d38565b92508261369d5761369c613648565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006136e282612d38565b91506136ed83612d38565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613722576137216136a8565b5b828201905092915050565b60006040820190506137426000830185612ec6565b61374f6020830184612ec6565b9392505050565b600061376182612d38565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613794576137936136a8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f272066696c6c3d277472616e73706172656e7427207374726f6b653d27000000600082015250565b6000613804601d836135d1565b915061380f826137ce565b601d82019050919050565b7f272f3e0000000000000000000000000000000000000000000000000000000000600082015250565b60006138506003836135d1565b915061385b8261381a565b600382019050919050565b600061387282856135dc565b915061387d826137f7565b915061388982846135dc565b915061389482613843565b91508190509392505050565b7f746f6b656e55524920697320616c726561647920736574210000000000000000600082015250565b60006138d6601883612c88565b91506138e1826138a0565b602082019050919050565b60006020820190508181036000830152613905816138c9565b9050919050565b7f546f6b656e496420686173206e6f74206265656e206d696e7465642079657421600082015250565b6000613942602083612c88565b915061394d8261390c565b602082019050919050565b6000602082019050818103600083015261397181613935565b9050919050565b7f4e65656420746f207761697420666f722074686520436861696e6c696e6b206e60008201527f6f646520746f20726573706f6e64210000000000000000000000000000000000602082015250565b60006139d4602f83612c88565b91506139df82613978565b604082019050919050565b60006020820190508181036000830152613a03816139c7565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000613a66602983612c88565b9150613a7182613a0a565b604082019050919050565b60006020820190508181036000830152613a9581613a59565b9050919050565b7f3c73766720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323060008201527f30302f73766727206865696768743d2700000000000000000000000000000000602082015250565b6000613af86030836135d1565b9150613b0382613a9c565b603082019050919050565b7f272077696474683d270000000000000000000000000000000000000000000000600082015250565b6000613b446009836135d1565b9150613b4f82613b0e565b600982019050919050565b7f273e000000000000000000000000000000000000000000000000000000000000600082015250565b6000613b906002836135d1565b9150613b9b82613b5a565b600282019050919050565b6000613bb182613aeb565b9150613bbd82856135dc565b9150613bc882613b37565b9150613bd482846135dc565b9150613bdf82613b83565b91508190509392505050565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b6000613c216006836135d1565b9150613c2c82613beb565b600682019050919050565b6000613c4382846135dc565b9150613c4e82613c14565b915081905092915050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000613cb5602a83612c88565b9150613cc082613c59565b604082019050919050565b60006020820190508181036000830152613ce481613ca8565b9050919050565b7f7b226e616d65223a2022535647204e4654222c20226465736372697074696f6e60008201527f223a2022416e2053564720637265617465642061732070617274206f6620612060208201527f70726f6f66206f6620636f6e6365707420666f722042474b203531394520495460408201527f552032303232222c202261747472696275746573223a22616e7920637573746f60608201527f6d2061747472696275746573222c2022696d616765223a202200000000000000608082015250565b6000613db96099836135d1565b9150613dc482613ceb565b609982019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b6000613e056002836135d1565b9150613e1082613dcf565b600282019050919050565b6000613e2682613dac565b9150613e3282846135dc565b9150613e3d82613df8565b915081905092915050565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b6000613e7e601f83612c88565b9150613e8982613e48565b602082019050919050565b60006020820190508181036000830152613ead81613e71565b9050919050565b6000613ebf82612d38565b9150613eca83612d38565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f0357613f026136a8565b5b828202905092915050565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b6000613f446001836135d1565b9150613f4f82613f0e565b600182019050919050565b6000613f6682866135dc565b9150613f7182613f37565b9150613f7d82856135dc565b9150613f8882613f37565b9150613f9482846135dc565b9150819050949350505050565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b6000613ffd603183612c88565b915061400882613fa1565b604082019050919050565b6000602082019050818103600083015261402c81613ff0565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b600061408f602c83612c88565b915061409a82614033565b604082019050919050565b600060208201905081810360008301526140be81614082565b9050919050565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b6000614121602983612c88565b915061412c826140c5565b604082019050919050565b6000602082019050818103600083015261415081614114565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006141b3602483612c88565b91506141be82614157565b604082019050919050565b600060208201905081810360008301526141e2816141a6565b9050919050565b60006141f482612d38565b91506141ff83612d38565b925082821015614212576142116136a8565b5b828203905092915050565b600061422882612d38565b915061423383612d38565b92508261424357614242613648565b5b828204905092915050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006142aa602e83612c88565b91506142b58261424e565b604082019050919050565b600060208201905081810360008301526142d98161429d565b9050919050565b600060ff82169050919050565b60006142f8826142e0565b9150614303836142e0565b92508260ff03821115614319576143186136a8565b5b828201905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061435a601983612c88565b915061436582614324565b602082019050919050565b600060208201905081810360008301526143898161434d565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006143ec603283612c88565b91506143f782614390565b604082019050919050565b6000602082019050818103600083015261441b816143df565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b600061447e602f83612c88565b915061448982614422565b604082019050919050565b600060208201905081810360008301526144ad81614471565b9050919050565b60006040820190506144c960008301856132fe565b6144d66020830184612ec6565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000614504826144dd565b61450e81856144e8565b935061451e818560208601612c99565b61452781612ccc565b840191505092915050565b60006060820190506145476000830186612dcd565b6145546020830185612ec6565b818103604083015261456681846144f9565b9050949350505050565b60008151905061457f8161312e565b92915050565b60006020828403121561459b5761459a612bb8565b5b60006145a984828501614570565b91505092915050565b60006080820190506145c76000830187612dcd565b6145d46020830186612dcd565b6145e16040830185612ec6565b81810360608301526145f381846144f9565b905095945050505050565b60008151905061460d81612bee565b92915050565b60006020828403121561462957614628612bb8565b5b6000614637848285016145fe565b91505092915050565b600060808201905061465560008301876132fe565b6146626020830186612ec6565b61466f6040830185612dcd565b61467c6060830184612ec6565b95945050505050565b6000819050919050565b6146a061469b82612e63565b614685565b82525050565b6000819050919050565b6146c16146bc82612d38565b6146a6565b82525050565b60006146d3828561468f565b6020820191506146e382846146b0565b6020820191508190509392505050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614729602083612c88565b9150614734826146f3565b602082019050919050565b600060208201905081810360008301526147588161471c565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614795601c83612c88565b91506147a08261475f565b602082019050919050565b600060208201905081810360008301526147c481614788565b905091905056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212205d82b4e61c4b3d918a05e13a0de6adc53b37c1df43d4a918feb74403713f588764736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 291,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 293,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 297,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 301,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 305,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 311,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1243,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 79,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "nonces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2069,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2071,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "keyHash",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 2073,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "fee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2075,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "maxNumberOfPaths",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2077,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "maxNumberOfPathCommands",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2079,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "size",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2082,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "pathCommands",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2085,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "colors",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2089,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "requestIdToSender",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2093,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "tokenIdToRandomNumber",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2097,
        "contract": "contracts/RandomSVG.sol:RandomSVG",
        "label": "requestIdToTokenId",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}